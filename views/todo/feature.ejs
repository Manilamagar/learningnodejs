<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TodoMaster - Advanced Task Management</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }

        .header h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .sidebar {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            height: fit-content;
        }

        .todo-form {
            margin-bottom: 30px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: white;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .add-btn {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }

        .add-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: linear-gradient(135deg, #f093fb, #f5576c);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(240, 147, 251, 0.3);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .filters {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 8px 16px;
            border: 2px solid #e0e0e0;
            background: white;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .filter-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .todo-list {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        }

        .todo-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .todo-header h2 {
            color: #333;
            font-size: 1.8rem;
        }

        .search-box {
            padding: 10px 16px;
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            width: 250px;
            font-size: 14px;
        }

        .todo-item {
            background: white;
            border: 2px solid #f5f5f5;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .todo-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            border-color: #667eea;
        }

        .todo-item.completed {
            opacity: 0.7;
            background: #f8f9fa;
        }

        .todo-item.completed .todo-title {
            text-decoration: line-through;
        }

        .priority-indicator {
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 5px;
        }

        .priority-high { background: #ff4757; }
        .priority-medium { background: #ffa502; }
        .priority-low { background: #2ed573; }

        .todo-content {
            margin-left: 15px;
        }

        .todo-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 8px;
            color: #333;
        }

        .todo-description {
            color: #666;
            margin-bottom: 12px;
            line-height: 1.5;
        }

        .todo-meta {
            display: flex;
            align-items: center;
            gap: 15px;
            font-size: 0.9rem;
            color: #888;
            margin-bottom: 15px;
        }

        .todo-category {
            background: #e3f2fd;
            color: #1976d2;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .todo-actions {
            display: flex;
            gap: 10px;
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-complete {
            background: #2ed573;
            color: white;
        }

        .btn-edit {
            background: #ffa502;
            color: white;
        }

        .btn-delete {
            background: #ff4757;
            color: white;
        }

        .btn:hover {
            transform: translateY(-1px);
            opacity: 0.9;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #888;
        }

        .empty-state img {
            width: 120px;
            height: 120px;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .progress-bar {
            background: #e0e0e0;
            border-radius: 10px;
            height: 8px;
            margin: 20px 0;
            overflow: hidden;
        }

        .progress-fill {
            background: linear-gradient(90deg, #667eea, #764ba2);
            height: 100%;
            border-radius: 10px;
            transition: width 0.3s ease;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .search-box {
                width: 100%;
            }
            
            .todo-header {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #2ed573;
            color: white;
            padding: 15px 20px;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(46, 213, 115, 0.3);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            z-index: 1000;
        }

        .notification.show {
            transform: translateX(0);
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìù TodoMaster</h1>
            <p>Master your tasks with intelligent organization</p>
        </div>

        <div class="main-content">
            <div class="sidebar">
                <form class="todo-form" id="todoForm">
                    <div class="form-group">
                        <label for="title">Task Title</label>
                        <input type="text" id="title" name="title" placeholder="Enter task title..." required>
                    </div>
                    
                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea id="description" name="description" placeholder="Add details..." rows="3"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="priority">Priority</label>
                        <select id="priority" name="priority">
                            <option value="low">üü¢ Low</option>
                            <option value="medium" selected>üü° Medium</option>
                            <option value="high">üî¥ High</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="category">Category</label>
                        <select id="category" name="category">
                            <option value="personal">Personal</option>
                            <option value="work">Work</option>
                            <option value="health">Health</option>
                            <option value="education">Education</option>
                            <option value="finance">Finance</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="dueDate">Due Date</label>
                        <input type="date" id="dueDate" name="dueDate">
                    </div>
                    
                    <button type="submit" class="add-btn">
                        <span id="btnText">Add Task</span>
                        <span id="btnLoading" class="loading" style="display: none;"></span>
                    </button>
                </form>

                <div class="stats">
                    <div class="stat-card">
                        <div class="stat-number" id="totalTasks">0</div>
                        <div class="stat-label">Total Tasks</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="completedTasks">0</div>
                        <div class="stat-label">Completed</div>
                    </div>
                </div>

                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill" style="width: 0%"></div>
                </div>

                <div class="filters">
                    <button class="filter-btn active" data-filter="all">All</button>
                    <button class="filter-btn" data-filter="pending">Pending</button>
                    <button class="filter-btn" data-filter="completed">Completed</button>
                    <button class="filter-btn" data-filter="high">High Priority</button>
                </div>
            </div>

            <div class="todo-list">
                <div class="todo-header">
                    <h2>Your Tasks</h2>
                    <input type="text" class="search-box" id="searchBox" placeholder="Search tasks...">
                </div>
                
                <div id="todoContainer">
                    <div class="empty-state">
                        <div style="font-size: 4rem; margin-bottom: 20px;">üìã</div>
                        <h3>No tasks yet!</h3>
                        <p>Add your first task to get started with TodoMaster</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="notification" id="notification"></div>

    <script>
        class TodoMaster {
            constructor() {
                this.todos = JSON.parse(localStorage.getItem('todoMaster') || '[]');
                this.currentFilter = 'all';
                this.editingId = null;
                this.init();
            }

            init() {
                this.bindEvents();
                this.render();
                this.updateStats();
            }

            bindEvents() {
                document.getElementById('todoForm').addEventListener('submit', (e) => this.handleSubmit(e));
                document.getElementById('searchBox').addEventListener('input', (e) => this.handleSearch(e));
                
                document.querySelectorAll('.filter-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => this.handleFilter(e));
                });
            }

            async handleSubmit(e) {
                e.preventDefault();
                this.showLoading(true);

                const formData = new FormData(e.target);
                const todo = {
                    id: this.editingId || Date.now(),
                    title: formData.get('title'),
                    description: formData.get('description'),
                    priority: formData.get('priority'),
                    category: formData.get('category'),
                    dueDate: formData.get('dueDate'),
                    completed: false,
                    createdAt: this.editingId ? this.todos.find(t => t.id === this.editingId).createdAt : new Date().toISOString()
                };

                // Simulate API call delay
                await new Promise(resolve => setTimeout(resolve, 500));

                if (this.editingId) {
                    const index = this.todos.findIndex(t => t.id === this.editingId);
                    this.todos[index] = { ...this.todos[index], ...todo };
                    this.showNotification('Task updated successfully!');
                    this.editingId = null;
                    document.querySelector('.add-btn span').textContent = 'Add Task';
                } else {
                    this.todos.unshift(todo);
                    this.showNotification('Task added successfully!');
                }

                this.saveTodos();
                this.render();
                this.updateStats();
                e.target.reset();
                this.showLoading(false);
            }

            handleSearch(e) {
                const query = e.target.value.toLowerCase();
                const filtered = this.todos.filter(todo => 
                    todo.title.toLowerCase().includes(query) ||
                    todo.description.toLowerCase().includes(query) ||
                    todo.category.toLowerCase().includes(query)
                );
                this.renderTodos(filtered);
            }

            handleFilter(e) {
                document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
                e.target.classList.add('active');
                this.currentFilter = e.target.dataset.filter;
                this.render();
            }

            getFilteredTodos() {
                switch (this.currentFilter) {
                    case 'pending':
                        return this.todos.filter(todo => !todo.completed);
                    case 'completed':
                        return this.todos.filter(todo => todo.completed);
                    case 'high':
                        return this.todos.filter(todo => todo.priority === 'high');
                    default:
                        return this.todos;
                }
            }

            render() {
                const filtered = this.getFilteredTodos();
                this.renderTodos(filtered);
            }

            renderTodos(todos) {
                const container = document.getElementById('todoContainer');
                
                if (todos.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <div style="font-size: 4rem; margin-bottom: 20px;">üìã</div>
                            <h3>No tasks found!</h3>
                            <p>Try adjusting your search or filters</p>
                        </div>
                    `;
                    return;
                }

                container.innerHTML = todos.map(todo => `
                    <div class="todo-item ${todo.completed ? 'completed' : ''}" data-id="${todo.id}">
                        <div class="priority-indicator priority-${todo.priority}"></div>
                        <div class="todo-content">
                            <div class="todo-title">${todo.title}</div>
                            ${todo.description ? `<div class="todo-description">${todo.description}</div>` : ''}
                            <div class="todo-meta">
                                <span class="todo-category">${todo.category}</span>
                                ${todo.dueDate ? `<span>üìÖ ${new Date(todo.dueDate).toLocaleDateString()}</span>` : ''}
                                <span>Created: ${new Date(todo.createdAt).toLocaleDateString()}</span>
                            </div>
                            <div class="todo-actions">
                                <button class="btn btn-complete" onclick="todoApp.toggleComplete(${todo.id})">
                                    ${todo.completed ? '‚Ü©Ô∏è Undo' : '‚úÖ Complete'}
                                </button>
                                <button class="btn btn-edit" onclick="todoApp.editTodo(${todo.id})">‚úèÔ∏è Edit</button>
                                <button class="btn btn-delete" onclick="todoApp.deleteTodo(${todo.id})">üóëÔ∏è Delete</button>
                            </div>
                        </div>
                    </div>
                `).join('');
            }

            toggleComplete(id) {
                const todo = this.todos.find(t => t.id === id);
                todo.completed = !todo.completed;
                this.saveTodos();
                this.render();
                this.updateStats();
                this.showNotification(todo.completed ? 'Task completed! üéâ' : 'Task marked as pending');
            }

            editTodo(id) {
                const todo = this.todos.find(t => t.id === id);
                const form = document.getElementById('todoForm');
                
                form.title.value = todo.title;
                form.description.value = todo.description;
                form.priority.value = todo.priority;
                form.category.value = todo.category;
                form.dueDate.value = todo.dueDate;
                
                this.editingId = id;
                document.getElementById('btnText').textContent = 'Update Task';
                
                // Scroll to form
                form.scrollIntoView({ behavior: 'smooth' });
            }

            deleteTodo(id) {
                if (confirm('Are you sure you want to delete this task?')) {
                    this.todos = this.todos.filter(t => t.id !== id);
                    this.saveTodos();
                    this.render();
                    this.updateStats();
                    this.showNotification('Task deleted successfully');
                }
            }

            updateStats() {
                const total = this.todos.length;
                const completed = this.todos.filter(t => t.completed).length;
                const progress = total > 0 ? (completed / total) * 100 : 0;

                document.getElementById('totalTasks').textContent = total;
                document.getElementById('completedTasks').textContent = completed;
                document.getElementById('progressFill').style.width = `${progress}%`;
            }

            saveTodos() {
                localStorage.setItem('todoMaster', JSON.stringify(this.todos));
            }

            showNotification(message) {
                const notification = document.getElementById('notification');
                notification.textContent = message;
                notification.classList.add('show');
                
                setTimeout(() => {
                    notification.classList.remove('show');
                }, 3000);
            }

            showLoading(show) {
                document.getElementById('btnText').style.display = show ? 'none' : 'inline';
                document.getElementById('btnLoading').style.display = show ? 'inline-block' : 'none';
            }
        }

        // Initialize the app
        const todoApp = new TodoMaster();

        // Service Worker simulation for offline functionality
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/sw.js').catch(() => {
                console.log('Service Worker registration failed');
            });
        }
    </script>
</body>
</html>
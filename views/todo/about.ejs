<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TodoMaster - Modern Task Management</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/umd/lucide.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 24px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);
            padding: 40px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 8px;
        }

        .header p {
            color: #666;
            font-size: 1.1rem;
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }

        .stat-card {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            padding: 20px;
            border-radius: 16px;
            text-align: center;
            transform: translateY(0);
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
        }

        .stat-card h3 {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .stat-card p {
            opacity: 0.9;
            font-size: 0.9rem;
        }

        .input-section {
            margin-bottom: 40px;
        }

        .input-group {
            display: flex;
            gap: 12px;
            margin-bottom: 20px;
        }

        .todo-input {
            flex: 1;
            padding: 16px 20px;
            border: 2px solid #e1e5e9;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.8);
        }

        .todo-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            background: white;
        }

        .priority-select {
            padding: 16px 20px;
            border: 2px solid #e1e5e9;
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.8);
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .priority-select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .add-btn {
            padding: 16px 24px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .add-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

        .filters {
            display: flex;
            gap: 12px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 10px 20px;
            border: 2px solid #e1e5e9;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .filter-btn:hover,
        .filter-btn.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-color: transparent;
            transform: translateY(-2px);
        }

        .todo-list {
            space-y: 16px;
        }

        .todo-item {
            background: rgba(255, 255, 255, 0.9);
            border: 1px solid rgba(0, 0, 0, 0.05);
            border-radius: 16px;
            padding: 20px;
            margin-bottom: 16px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .todo-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            transform: scaleY(0);
            transform-origin: bottom;
            transition: transform 0.3s ease;
        }

        .todo-item:hover::before {
            transform: scaleY(1);
        }

        .todo-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }

        .todo-item.completed {
            opacity: 0.7;
            background: rgba(0, 0, 0, 0.02);
        }

        .todo-item.completed .todo-text {
            text-decoration: line-through;
            color: #999;
        }

        .todo-content {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .todo-checkbox {
            width: 24px;
            height: 24px;
            border: 2px solid #667eea;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.8);
        }

        .todo-checkbox:hover {
            background: rgba(102, 126, 234, 0.1);
        }

        .todo-checkbox.checked {
            background: linear-gradient(135deg, #667eea, #764ba2);
        }

        .todo-text {
            flex: 1;
            font-size: 1.1rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .todo-meta {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-top: 8px;
            font-size: 0.9rem;
            color: #666;
        }

        .priority-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .priority-high {
            background: rgba(239, 68, 68, 0.1);
            color: #dc2626;
        }

        .priority-medium {
            background: rgba(245, 158, 11, 0.1);
            color: #d97706;
        }

        .priority-low {
            background: rgba(34, 197, 94, 0.1);
            color: #16a34a;
        }

        .todo-actions {
            display: flex;
            gap: 8px;
        }

        .action-btn {
            width: 36px;
            height: 36px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            background: rgba(0, 0, 0, 0.05);
        }

        .action-btn:hover {
            transform: scale(1.1);
        }

        .edit-btn:hover {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
        }

        .delete-btn:hover {
            background: rgba(239, 68, 68, 0.1);
            color: #ef4444;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-state svg {
            width: 64px;
            height: 64px;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 4px;
            margin-bottom: 30px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            transition: width 0.3s ease;
            border-radius: 4px;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .todo-item.new {
            animation: slideIn 0.3s ease;
        }

        @media (max-width: 640px) {
            .container {
                padding: 20px;
                margin: 10px;
            }

            .input-group {
                flex-direction: column;
            }

            .todo-content {
                flex-direction: column;
                align-items: flex-start;
                gap: 12px;
            }

            .todo-actions {
                align-self: flex-end;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>TodoMaster</h1>
            <p>Organize your tasks with style and efficiency</p>
        </div>

        <div class="stats">
            <div class="stat-card">
                <h3 id="totalTasks">0</h3>
                <p>Total Tasks</p>
            </div>
            <div class="stat-card">
                <h3 id="completedTasks">0</h3>
                <p>Completed</p>
            </div>
            <div class="stat-card">
                <h3 id="pendingTasks">0</h3>
                <p>Pending</p>
            </div>
        </div>

        <div class="progress-bar">
            <div class="progress-fill" id="progressFill"></div>
        </div>

        <div class="input-section">
            <div class="input-group">
                <input type="text" class="todo-input" id="todoInput" placeholder="Add a new task...">
                <select class="priority-select" id="prioritySelect">
                    <option value="low">Low Priority</option>
                    <option value="medium" selected>Medium Priority</option>
                    <option value="high">High Priority</option>
                </select>
                <button class="add-btn" id="addBtn">
                    <i data-lucide="plus"></i>
                    Add Task
                </button>
            </div>
        </div>

        <div class="filters">
            <button class="filter-btn active" data-filter="all">All Tasks</button>
            <button class="filter-btn" data-filter="pending">Pending</button>
            <button class="filter-btn" data-filter="completed">Completed</button>
            <button class="filter-btn" data-filter="high">High Priority</button>
        </div>

        <div class="todo-list" id="todoList">
            <div class="empty-state" id="emptyState">
                <i data-lucide="check-circle-2"></i>
                <h3>No tasks yet</h3>
                <p>Add your first task to get started!</p>
            </div>
        </div>
    </div>

    <script>
        // Initialize Lucide icons
        lucide.createIcons();

        class TodoMaster {
            constructor() {
                this.todos = JSON.parse(localStorage.getItem('todos')) || [];
                this.filter = 'all';
                this.editingId = null;
                this.init();
            }

            init() {
                this.bindEvents();
                this.render();
                this.updateStats();
                
                // Add some sample data if empty
                if (this.todos.length === 0) {
                    this.addSampleData();
                }
            }

            addSampleData() {
                const sampleTodos = [
                    { text: 'Design TodoMaster UI', priority: 'high', completed: true },
                    { text: 'Implement drag and drop functionality', priority: 'medium', completed: false },
                    { text: 'Add data persistence', priority: 'low', completed: true },
                    { text: 'Create responsive design', priority: 'high', completed: false }
                ];
                
                sampleTodos.forEach(todo => {
                    this.todos.push({
                        id: Date.now() + Math.random(),
                        ...todo,
                        createdAt: new Date().toISOString()
                    });
                });
                
                this.saveTodos();
                this.render();
                this.updateStats();
            }

            bindEvents() {
                const addBtn = document.getElementById('addBtn');
                const todoInput = document.getElementById('todoInput');
                const filterBtns = document.querySelectorAll('.filter-btn');

                addBtn.addEventListener('click', () => this.addTodo());
                todoInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.addTodo();
                });

                filterBtns.forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        filterBtns.forEach(b => b.classList.remove('active'));
                        e.target.classList.add('active');
                        this.filter = e.target.dataset.filter;
                        this.render();
                    });
                });
            }

            addTodo() {
                const input = document.getElementById('todoInput');
                const priority = document.getElementById('prioritySelect').value;
                const text = input.value.trim();

                if (!text) return;

                if (this.editingId) {
                    this.updateTodo(this.editingId, text, priority);
                    this.editingId = null;
                } else {
                    const todo = {
                        id: Date.now(),
                        text,
                        priority,
                        completed: false,
                        createdAt: new Date().toISOString()
                    };
                    this.todos.unshift(todo);
                }

                input.value = '';
                document.getElementById('prioritySelect').value = 'medium';
                this.saveTodos();
                this.render();
                this.updateStats();
            }

            updateTodo(id, text, priority) {
                const todo = this.todos.find(t => t.id === id);
                if (todo) {
                    todo.text = text;
                    todo.priority = priority;
                }
            }

            toggleTodo(id) {
                const todo = this.todos.find(t => t.id === id);
                if (todo) {
                    todo.completed = !todo.completed;
                    this.saveTodos();
                    this.render();
                    this.updateStats();
                }
            }

            deleteTodo(id) {
                this.todos = this.todos.filter(t => t.id !== id);
                this.saveTodos();
                this.render();
                this.updateStats();
            }

            editTodo(id) {
                const todo = this.todos.find(t => t.id === id);
                if (todo) {
                    document.getElementById('todoInput').value = todo.text;
                    document.getElementById('prioritySelect').value = todo.priority;
                    this.editingId = id;
                    document.getElementById('todoInput').focus();
                }
            }

            getFilteredTodos() {
                switch (this.filter) {
                    case 'completed':
                        return this.todos.filter(t => t.completed);
                    case 'pending':
                        return this.todos.filter(t => !t.completed);
                    case 'high':
                        return this.todos.filter(t => t.priority === 'high');
                    default:
                        return this.todos;
                }
            }

            render() {
                const todoList = document.getElementById('todoList');
                const emptyState = document.getElementById('emptyState');
                const filteredTodos = this.getFilteredTodos();

                if (filteredTodos.length === 0) {
                    todoList.innerHTML = '';
                    todoList.appendChild(emptyState);
                    return;
                }

                todoList.innerHTML = filteredTodos.map(todo => `
                    <div class="todo-item ${todo.completed ? 'completed' : ''}" data-id="${todo.id}">
                        <div class="todo-content">
                            <div class="todo-checkbox ${todo.completed ? 'checked' : ''}" onclick="app.toggleTodo(${todo.id})">
                                ${todo.completed ? '<i data-lucide="check"></i>' : ''}
                            </div>
                            <div style="flex: 1;">
                                <div class="todo-text">${todo.text}</div>
                                <div class="todo-meta">
                                    <span class="priority-badge priority-${todo.priority}">${todo.priority.toUpperCase()}</span>
                                    <span>${new Date(todo.createdAt).toLocaleDateString()}</span>
                                </div>
                            </div>
                            <div class="todo-actions">
                                <button class="action-btn edit-btn" onclick="app.editTodo(${todo.id})">
                                    <i data-lucide="edit-2"></i>
                                </button>
                                <button class="action-btn delete-btn" onclick="app.deleteTodo(${todo.id})">
                                    <i data-lucide="trash-2"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `).join('');

                lucide.createIcons();
            }

            updateStats() {
                const total = this.todos.length;
                const completed = this.todos.filter(t => t.completed).length;
                const pending = total - completed;
                const progress = total > 0 ? (completed / total) * 100 : 0;

                document.getElementById('totalTasks').textContent = total;
                document.getElementById('completedTasks').textContent = completed;
                document.getElementById('pendingTasks').textContent = pending;
                document.getElementById('progressFill').style.width = `${progress}%`;
            }

            saveTodos() {
                localStorage.setItem('todos', JSON.stringify(this.todos));
            }
        }

        // Initialize the app
        const app = new TodoMaster();
    </script>
</body>
</html>